"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Neurelo API Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CulturalDataApiService = exports.CulturalDataApi = exports.CulturalDataApiFactory = exports.CulturalDataApiFp = exports.CulturalDataApiAxiosParamCreator = exports.SortOrder = exports.QueryMode = exports.CulturalDataScalarFieldEnum = exports.CulturalDataGroupByInputMinEnum = exports.CulturalDataGroupByInputMaxEnum = exports.CulturalDataGroupByInputCountEnum = exports.CulturalDataAggregateInputMinEnum = exports.CulturalDataAggregateInputMaxEnum = exports.CulturalDataAggregateInputCountEnum = void 0;
var configuration_1 = require("./configuration");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.CulturalDataAggregateInputCountEnum = {
    All: '_all',
    Cities: 'Cities',
    EthnicityBackground: 'Ethnicity_Background',
    Food: 'Food',
    Language: 'Language',
    Literature: 'Literature',
    Music: 'Music',
    Nationality: 'Nationality',
    Politics: 'Politics',
    Id: 'id'
};
exports.CulturalDataAggregateInputMaxEnum = {
    Cities: 'Cities',
    EthnicityBackground: 'Ethnicity_Background',
    Food: 'Food',
    Language: 'Language',
    Literature: 'Literature',
    Music: 'Music',
    Nationality: 'Nationality',
    Politics: 'Politics',
    Id: 'id'
};
exports.CulturalDataAggregateInputMinEnum = {
    Cities: 'Cities',
    EthnicityBackground: 'Ethnicity_Background',
    Food: 'Food',
    Language: 'Language',
    Literature: 'Literature',
    Music: 'Music',
    Nationality: 'Nationality',
    Politics: 'Politics',
    Id: 'id'
};
exports.CulturalDataGroupByInputCountEnum = {
    All: '_all',
    Cities: 'Cities',
    EthnicityBackground: 'Ethnicity_Background',
    Food: 'Food',
    Language: 'Language',
    Literature: 'Literature',
    Music: 'Music',
    Nationality: 'Nationality',
    Politics: 'Politics',
    Id: 'id'
};
exports.CulturalDataGroupByInputMaxEnum = {
    Cities: 'Cities',
    EthnicityBackground: 'Ethnicity_Background',
    Food: 'Food',
    Language: 'Language',
    Literature: 'Literature',
    Music: 'Music',
    Nationality: 'Nationality',
    Politics: 'Politics',
    Id: 'id'
};
exports.CulturalDataGroupByInputMinEnum = {
    Cities: 'Cities',
    EthnicityBackground: 'Ethnicity_Background',
    Food: 'Food',
    Language: 'Language',
    Literature: 'Literature',
    Music: 'Music',
    Nationality: 'Nationality',
    Politics: 'Politics',
    Id: 'id'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.CulturalDataScalarFieldEnum = {
    Cities: 'Cities',
    EthnicityBackground: 'Ethnicity_Background',
    Food: 'Food',
    Language: 'Language',
    Literature: 'Literature',
    Music: 'Music',
    Nationality: 'Nationality',
    Politics: 'Politics',
    Id: 'id'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.QueryMode = {
    Default: 'default',
    Insensitive: 'insensitive'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.SortOrder = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * CulturalDataApi - axios parameter creator
 * @export
 */
var CulturalDataApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Aggregate by Cultural_Data
         * @param {CulturalDataAggregateInput} select
         * @param {CulturalDataWhereInput} [filter]
         * @param {Array<CulturalDataOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByCulturalData: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('aggregateByCulturalData', 'select', select);
                            localVarPath = "/rest/Cultural_Data/__aggregate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create multiple Cultural_Data records
         * @param {Array<CulturalDataCreateManyInput>} culturalDataCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyCulturalData: function (culturalDataCreateManyInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culturalDataCreateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('createManyCulturalData', 'culturalDataCreateManyInput', culturalDataCreateManyInput);
                            localVarPath = "/rest/Cultural_Data";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(culturalDataCreateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create one Cultural_Data record
         * @param {CulturalDataCreateInput} culturalDataCreateInput
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneCulturalData: function (culturalDataCreateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culturalDataCreateInput' is not null or undefined
                            (0, common_1.assertParamExists)('createOneCulturalData', 'culturalDataCreateInput', culturalDataCreateInput);
                            localVarPath = "/rest/Cultural_Data/__one";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(culturalDataCreateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete multiple Cultural_Data records
         * @param {CulturalDataWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCulturalData: function (filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/Cultural_Data";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one Cultural_Data record by id
         * @param {string} value
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCulturalDataById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('deleteCulturalDataById', 'value', value);
                            localVarPath = "/rest/Cultural_Data/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple Cultural_Data records
         * @param {CulturalDataSelectInput} [select]
         * @param {CulturalDataWhereInput} [filter]
         * @param {Array<CulturalDataOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCulturalData: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/Cultural_Data";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one Cultural_Data record by id
         * @param {string} value
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCulturalDataById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('findCulturalDataById', 'value', value);
                            localVarPath = "/rest/Cultural_Data/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Group by Cultural_Data
         * @param {CulturalDataGroupByInput} select
         * @param {CulturalDataWhereInput} [filter]
         * @param {Array<CulturalDataOrderByWithAggregationInput>} [orderBy]
         * @param {Array<CulturalDataScalarFieldEnum>} [groupBy]
         * @param {CulturalDataScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByCulturalData: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('groupByCulturalData', 'select', select);
                            localVarPath = "/rest/Cultural_Data/__groupBy";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (groupBy) {
                                localVarQueryParameter['group_by'] = groupBy;
                            }
                            if (having !== undefined) {
                                localVarQueryParameter['having'] = having;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update multiple Cultural_Data records
         * @param {CulturalDataUpdateManyInput} culturalDataUpdateManyInput
         * @param {CulturalDataWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCulturalData: function (culturalDataUpdateManyInput, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culturalDataUpdateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('updateCulturalData', 'culturalDataUpdateManyInput', culturalDataUpdateManyInput);
                            localVarPath = "/rest/Cultural_Data";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(culturalDataUpdateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one Cultural_Data record by id
         * @param {string} value
         * @param {CulturalDataUpdateInput} culturalDataUpdateInput
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCulturalDataById: function (value, culturalDataUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('updateCulturalDataById', 'value', value);
                            // verify required parameter 'culturalDataUpdateInput' is not null or undefined
                            (0, common_1.assertParamExists)('updateCulturalDataById', 'culturalDataUpdateInput', culturalDataUpdateInput);
                            localVarPath = "/rest/Cultural_Data/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(culturalDataUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CulturalDataApiAxiosParamCreator = CulturalDataApiAxiosParamCreator;
/**
 * CulturalDataApi - functional programming interface
 * @export
 */
var CulturalDataApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CulturalDataApiAxiosParamCreator)(configuration);
    return {
        /**
         * Aggregate by Cultural_Data
         * @param {CulturalDataAggregateInput} select
         * @param {CulturalDataWhereInput} [filter]
         * @param {Array<CulturalDataOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByCulturalData: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.aggregateByCulturalData(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CulturalDataApi.aggregateByCulturalData']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create multiple Cultural_Data records
         * @param {Array<CulturalDataCreateManyInput>} culturalDataCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyCulturalData: function (culturalDataCreateManyInput, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createManyCulturalData(culturalDataCreateManyInput, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CulturalDataApi.createManyCulturalData']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create one Cultural_Data record
         * @param {CulturalDataCreateInput} culturalDataCreateInput
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneCulturalData: function (culturalDataCreateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOneCulturalData(culturalDataCreateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CulturalDataApi.createOneCulturalData']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete multiple Cultural_Data records
         * @param {CulturalDataWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCulturalData: function (filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCulturalData(filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CulturalDataApi.deleteCulturalData']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one Cultural_Data record by id
         * @param {string} value
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCulturalDataById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCulturalDataById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CulturalDataApi.deleteCulturalDataById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple Cultural_Data records
         * @param {CulturalDataSelectInput} [select]
         * @param {CulturalDataWhereInput} [filter]
         * @param {Array<CulturalDataOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCulturalData: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findCulturalData(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CulturalDataApi.findCulturalData']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one Cultural_Data record by id
         * @param {string} value
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCulturalDataById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findCulturalDataById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CulturalDataApi.findCulturalDataById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Group by Cultural_Data
         * @param {CulturalDataGroupByInput} select
         * @param {CulturalDataWhereInput} [filter]
         * @param {Array<CulturalDataOrderByWithAggregationInput>} [orderBy]
         * @param {Array<CulturalDataScalarFieldEnum>} [groupBy]
         * @param {CulturalDataScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByCulturalData: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupByCulturalData(select, filter, orderBy, groupBy, having, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CulturalDataApi.groupByCulturalData']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update multiple Cultural_Data records
         * @param {CulturalDataUpdateManyInput} culturalDataUpdateManyInput
         * @param {CulturalDataWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCulturalData: function (culturalDataUpdateManyInput, filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateCulturalData(culturalDataUpdateManyInput, filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CulturalDataApi.updateCulturalData']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one Cultural_Data record by id
         * @param {string} value
         * @param {CulturalDataUpdateInput} culturalDataUpdateInput
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCulturalDataById: function (value, culturalDataUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateCulturalDataById(value, culturalDataUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CulturalDataApi.updateCulturalDataById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.CulturalDataApiFp = CulturalDataApiFp;
/**
 * CulturalDataApi - factory interface
 * @export
 */
var CulturalDataApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CulturalDataApiFp)(configuration);
    return {
        /**
         * Aggregate by Cultural_Data
         * @param {CulturalDataAggregateInput} select
         * @param {CulturalDataWhereInput} [filter]
         * @param {Array<CulturalDataOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByCulturalData: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.aggregateByCulturalData(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create multiple Cultural_Data records
         * @param {Array<CulturalDataCreateManyInput>} culturalDataCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyCulturalData: function (culturalDataCreateManyInput, options) {
            return localVarFp.createManyCulturalData(culturalDataCreateManyInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create one Cultural_Data record
         * @param {CulturalDataCreateInput} culturalDataCreateInput
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneCulturalData: function (culturalDataCreateInput, select, options) {
            return localVarFp.createOneCulturalData(culturalDataCreateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete multiple Cultural_Data records
         * @param {CulturalDataWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCulturalData: function (filter, options) {
            return localVarFp.deleteCulturalData(filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one Cultural_Data record by id
         * @param {string} value
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCulturalDataById: function (value, select, options) {
            return localVarFp.deleteCulturalDataById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve multiple Cultural_Data records
         * @param {CulturalDataSelectInput} [select]
         * @param {CulturalDataWhereInput} [filter]
         * @param {Array<CulturalDataOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCulturalData: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.findCulturalData(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one Cultural_Data record by id
         * @param {string} value
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCulturalDataById: function (value, select, options) {
            return localVarFp.findCulturalDataById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Group by Cultural_Data
         * @param {CulturalDataGroupByInput} select
         * @param {CulturalDataWhereInput} [filter]
         * @param {Array<CulturalDataOrderByWithAggregationInput>} [orderBy]
         * @param {Array<CulturalDataScalarFieldEnum>} [groupBy]
         * @param {CulturalDataScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByCulturalData: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            return localVarFp.groupByCulturalData(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update multiple Cultural_Data records
         * @param {CulturalDataUpdateManyInput} culturalDataUpdateManyInput
         * @param {CulturalDataWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCulturalData: function (culturalDataUpdateManyInput, filter, options) {
            return localVarFp.updateCulturalData(culturalDataUpdateManyInput, filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one Cultural_Data record by id
         * @param {string} value
         * @param {CulturalDataUpdateInput} culturalDataUpdateInput
         * @param {CulturalDataSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCulturalDataById: function (value, culturalDataUpdateInput, select, options) {
            return localVarFp.updateCulturalDataById(value, culturalDataUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CulturalDataApiFactory = CulturalDataApiFactory;
/**
 * CulturalDataApi - object-oriented interface
 * @export
 * @class CulturalDataApi
 * @extends {BaseAPI}
 */
var CulturalDataApi = /** @class */ (function (_super) {
    __extends(CulturalDataApi, _super);
    function CulturalDataApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Aggregate by Cultural_Data
     * @param {CulturalDataAggregateInput} select
     * @param {CulturalDataWhereInput} [filter]
     * @param {Array<CulturalDataOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CulturalDataApi
     */
    CulturalDataApi.prototype.aggregateByCulturalData = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.CulturalDataApiFp)(this.configuration).aggregateByCulturalData(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create multiple Cultural_Data records
     * @param {Array<CulturalDataCreateManyInput>} culturalDataCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CulturalDataApi
     */
    CulturalDataApi.prototype.createManyCulturalData = function (culturalDataCreateManyInput, options) {
        var _this = this;
        return (0, exports.CulturalDataApiFp)(this.configuration).createManyCulturalData(culturalDataCreateManyInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create one Cultural_Data record
     * @param {CulturalDataCreateInput} culturalDataCreateInput
     * @param {CulturalDataSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CulturalDataApi
     */
    CulturalDataApi.prototype.createOneCulturalData = function (culturalDataCreateInput, select, options) {
        var _this = this;
        return (0, exports.CulturalDataApiFp)(this.configuration).createOneCulturalData(culturalDataCreateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete multiple Cultural_Data records
     * @param {CulturalDataWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CulturalDataApi
     */
    CulturalDataApi.prototype.deleteCulturalData = function (filter, options) {
        var _this = this;
        return (0, exports.CulturalDataApiFp)(this.configuration).deleteCulturalData(filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one Cultural_Data record by id
     * @param {string} value
     * @param {CulturalDataSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CulturalDataApi
     */
    CulturalDataApi.prototype.deleteCulturalDataById = function (value, select, options) {
        var _this = this;
        return (0, exports.CulturalDataApiFp)(this.configuration).deleteCulturalDataById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve multiple Cultural_Data records
     * @param {CulturalDataSelectInput} [select]
     * @param {CulturalDataWhereInput} [filter]
     * @param {Array<CulturalDataOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CulturalDataApi
     */
    CulturalDataApi.prototype.findCulturalData = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.CulturalDataApiFp)(this.configuration).findCulturalData(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one Cultural_Data record by id
     * @param {string} value
     * @param {CulturalDataSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CulturalDataApi
     */
    CulturalDataApi.prototype.findCulturalDataById = function (value, select, options) {
        var _this = this;
        return (0, exports.CulturalDataApiFp)(this.configuration).findCulturalDataById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Group by Cultural_Data
     * @param {CulturalDataGroupByInput} select
     * @param {CulturalDataWhereInput} [filter]
     * @param {Array<CulturalDataOrderByWithAggregationInput>} [orderBy]
     * @param {Array<CulturalDataScalarFieldEnum>} [groupBy]
     * @param {CulturalDataScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CulturalDataApi
     */
    CulturalDataApi.prototype.groupByCulturalData = function (select, filter, orderBy, groupBy, having, skip, take, options) {
        var _this = this;
        return (0, exports.CulturalDataApiFp)(this.configuration).groupByCulturalData(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update multiple Cultural_Data records
     * @param {CulturalDataUpdateManyInput} culturalDataUpdateManyInput
     * @param {CulturalDataWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CulturalDataApi
     */
    CulturalDataApi.prototype.updateCulturalData = function (culturalDataUpdateManyInput, filter, options) {
        var _this = this;
        return (0, exports.CulturalDataApiFp)(this.configuration).updateCulturalData(culturalDataUpdateManyInput, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one Cultural_Data record by id
     * @param {string} value
     * @param {CulturalDataUpdateInput} culturalDataUpdateInput
     * @param {CulturalDataSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CulturalDataApi
     */
    CulturalDataApi.prototype.updateCulturalDataById = function (value, culturalDataUpdateInput, select, options) {
        var _this = this;
        return (0, exports.CulturalDataApiFp)(this.configuration).updateCulturalDataById(value, culturalDataUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CulturalDataApi;
}(base_1.BaseAPI));
exports.CulturalDataApi = CulturalDataApi;
exports.CulturalDataApiService = new CulturalDataApi(configuration_1.neureloConfig);
